{"version":3,"sources":["components/handler/index.js","components/input/index.js","components/custom/index.js","components/select/index.js","components/textarea/index.js","components/label/index.js","components/index.js","app/index.js","index.js"],"names":["InputHandler","InputComponent","props","handleChange","e","target","type","checked","value","inputValue","nextState","state","setState","onChange","name","this","React","Component","defaultProps","toggleType","fieldClass","label","labelClass","inputProps","invert","className","onClick","Custom","children","otherProps","renderOptions","options","map","option","i","key","Label","id","labelProps","htmlFor","Form","handleInputChange","formData","getCommonProps","field","required","fieldProps","Object","inputClass","undefined","data","allFieldsRequired","autoComplete","createClassicInput","commonProps","createSelectInput","createTextareaInput","createCustom","content","createGroup","fields","title","fieldsGroupClass","groupProps","createFields","handleSubmit","preventDefault","onSubmit","forEach","formProps","App","inputData","getFormData","reactJsonOptions","iconStyle","indentWidth","collapsed","displayObjectSize","displayDataTypes","enableClipboard","src","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc583d08.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst InputHandler = (InputComponent) => {\n    return class InputHandler extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                name: props.name,\n                value: props.value\n            };\n        }\n\n        static defaultProps = {\n            value: \"\"\n        };\n\n        static propTypes = {\n            name: PropTypes.string.isRequired,\n            value: PropTypes.string,\n            onChange: PropTypes.func.isRequired\n        };\n\n        handleChange = (e) => {\n            const {type, checked, value} = e.target;\n            const inputValue = type === 'checkbox' ? checked : value;\n            const nextState = {...this.state, value: inputValue};\n            this.setState(nextState);\n            this.props.onChange(e, nextState);\n        };\n\n        render() {\n            return (\n                <InputComponent\n                    {...this.props}\n                    {...this.state}\n                    onChange={this.handleChange}\n                />\n            );\n        }\n    }\n};\n\nexport default InputHandler;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport InputHandler from \"../handler\";\n\n\nclass Input extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: props.type\n        };\n    }\n\n    toggleType = () => {\n        this.setState({\n            type: this.state.type === \"password\" ? \"text\" : \"password\"\n        });\n    };\n\n    render() {\n        const { fieldClass, labelClass, label, invert, ...inputProps} = this.props;\n        const {type} = this.props;\n\n        return (\n            <section className={fieldClass}>\n                {type !== \"radio\" ? label : null}\n                <input {...inputProps} {...this.state} />\n                {type === \"radio\" ? label : null}\n                {type === \"password\" ? <h6 onClick={this.toggleType}>Show password</h6> : null }\n            </section>\n        );\n    }\n}\n\nInput.propTypes = {\n    fieldClass: PropTypes.string,\n    labelClass: PropTypes.string,\n    label: PropTypes.node,\n\n    id: PropTypes.string.isRequired,\n    type: PropTypes.oneOf(['text', 'password', 'email', 'number', 'date', 'select', 'radio', 'submit', 'reset']).isRequired,\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    required: PropTypes.bool,\n    autoComplete: PropTypes.string,\n    className: PropTypes.string,\n    onChange: PropTypes.func.isRequired\n};\n\nexport default InputHandler(Input);","import React from 'react';\n\nexport default function Custom(props) {\n    const {children, ...otherProps} = props;\n\n    return (\n        <section {...otherProps}>\n            {children}\n        </section>\n    );\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport InputHandler from \"../handler\";\n\n\nclass SelectInput extends React.Component {\n    renderOptions = (options) => {\n        return [\n            { value: null, label: null },\n            ...options\n        ].map((option, i) => {\n            const {value, label} = option;\n            return <option key={i} value={value}>{label}</option>\n        });\n    };\n\n    render() {\n        const { fieldClass, labelClass, label, options, ...inputProps } = this.props;\n\n        return (\n            <section className={fieldClass}>\n                {label}\n                <select {...inputProps}>{this.renderOptions(options)}</select>\n            </section>\n        );\n    }\n}\n\nSelectInput.propTypes = {\n    fieldClass: PropTypes.string,\n    labelClass: PropTypes.string,\n    label: PropTypes.node,\n    options: PropTypes.arrayOf(PropTypes.shape({\n        value: PropTypes.string,\n        label: PropTypes.string\n    })),\n\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    required: PropTypes.bool,\n    autoComplete: PropTypes.string,\n    className: PropTypes.string,\n    onChange: PropTypes.func.isRequired\n};\n\nexport default InputHandler(SelectInput);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport InputHandler from \"../handler\";\n\n\nclass TextareaInput extends React.Component {\n    render() {\n        const { fieldClass, labelClass, label, value, ...inputProps } = this.props;\n\n        return (\n            <section className={fieldClass}>\n                {label}\n                <textarea {...inputProps}>{value}</textarea>\n            </section>\n        );\n    }\n}\n\nTextareaInput.propTypes = {\n    fieldClass: PropTypes.string,\n    labelClass: PropTypes.string,\n    label: PropTypes.node,\n\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    required: PropTypes.bool,\n    autoComplete: PropTypes.string,\n    className: PropTypes.string,\n    onChange: PropTypes.func.isRequired\n};\n\nexport default InputHandler(TextareaInput);","import React from 'react';\n\nclass Label extends React.Component {\n  render() {\n    const {id, value, ...labelProps} = this.props;\n    \n    return (\n      <label htmlFor={id} {...labelProps}>{value}</label>\n    );\n  }\n}\n\nexport default Label;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassicInput from \"./input\";\nimport Custom from \"./custom\";\nimport SelectInput from \"./select\";\nimport TextareaInput from \"./textarea\";\nimport Label from \"./label\";\n\n\nclass Form extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fieldsGroupClass: props.data.fieldsGroupClass || null,\n            fieldClass: props.data.fieldClass || null,\n            labelClass: props.data.labelClass || null,\n            inputClass: props.data.inputClass || null,\n            formData: {}\n        };\n    }\n\n    componentDidMount() {\n        const {data} = this.props;\n        const state = {};\n\n        data.fields.forEach((field) => {\n            const {type, value, name} = field;\n            if(type !== \"submit\") {\n                state[name] = value || \"\";\n            }\n        });\n\n        this.setState(state);\n    }\n\n    handleInputChange = (e, state) => {\n        const {name, value} = state;\n        this.setState({formData: {\n            ...this.state.formData,\n            [name]: value\n        }});\n    };\n\n    getCommonProps = (field, i) => {\n        const { label, required, ...fieldProps } = field;\n        const { name } = field;\n\n        const labelProps = {\n            id: `${name}_${i}`,\n            className: this.state.labelClass,\n            ...(label instanceof Object ? label : {})\n        };\n\n        const commonProps = {\n            fieldClass: this.state.fieldClass,\n            className: this.state.inputClass,\n            label: !label ? null : <Label {...labelProps} />,\n            required: required !== undefined ? required : this.props.data.allFieldsRequired,\n            id: `${name}_${i}`,\n            autoComplete: \"off\"\n        };\n\n        return [commonProps, fieldProps];\n    };\n\n    createClassicInput = (i, commonProps, fieldProps) => {\n        const props = {\n            ...commonProps,\n            onChange: this.handleInputChange,\n            ...fieldProps\n        };\n\n        return <ClassicInput key={i} {...props} />\n    };\n\n    createSelectInput = (i, commonProps, fieldProps) => {\n        const { type, ...inputProps } = fieldProps;\n        \n        const props = {\n            ...commonProps,\n            onChange: this.handleInputChange,\n            ...inputProps\n        };\n\n        return <SelectInput key={i} {...props} />\n    };\n    \n    createTextareaInput = (i, commonProps, fieldProps) => {\n        const { type, ...inputProps } = fieldProps;\n\n        const props = {\n            ...commonProps,\n            onChange: this.handleInputChange,\n            ...inputProps\n        };\n\n        return <TextareaInput key={i} {...props} />\n    };\n\n    createCustom = (field, i) => {\n        const { content, ...fieldProps } = field;\n        return <Custom key={i} {...fieldProps}>{content}</Custom>\n    };\n\n    createGroup = (field, i) => {\n        const {labelClass, fields, title, type, fieldsGroupClass, ...groupProps} = field;\n\n        return (\n            <section key={i} className={this.state.fieldClass} {...groupProps}>\n                <span className={labelClass || this.state.labelClass}>{title}</span>\n                <section className={fieldsGroupClass || this.state.fieldsGroupClass}>\n                    {this.createFields(fields)}\n                </section>\n            </section>\n        );\n    }\n\n    createFields = (fields) => (\n        fields.map(\n            (field, i) => {\n                const [commonProps, fieldProps] = this.getCommonProps(field, i);\n\n                switch (field.type) {\n                    case 'group': return this.createGroup(field, i);\n                    case 'custom': return this.createCustom(field, i);\n                    case 'textarea': return this.createTextareaInput(i, commonProps, fieldProps);\n                    case 'select': return this.createSelectInput(i, commonProps, fieldProps);\n                    default: return this.createClassicInput(i, commonProps, fieldProps);\n                }\n            }\n        )\n    );\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const {onSubmit} = this.props;\n        onSubmit(e, this.state.formData);\n    };\n\n    render() {\n        const {\n            data, children, ...formProps\n        } = this.props;\n\n        return (\n            <form {...formProps} onSubmit={this.handleSubmit}>\n                {children}\n                {this.createFields(data.fields)}\n            </form>\n        );\n    }\n};\n\nForm.defaultProps = {\n    data: {}\n};\n\nForm.propTypes = {\n    data: PropTypes.shape({\n        allFieldsRequired: PropTypes.bool,\n        fieldsGroupClass: PropTypes.string,\n        fieldClass: PropTypes.string,\n        labelClass: PropTypes.string,\n        inputClass: PropTypes.string,\n        fields: PropTypes.arrayOf(PropTypes.shape({\n            type: PropTypes.oneOf(['group', 'text', 'password', 'email', 'number', 'date', 'select', 'textarea', 'custom', 'radio', 'submit', 'reset']).isRequired,\n            name: PropTypes.string,\n            value: PropTypes.string,\n            required: PropTypes.bool,\n            autoComplete: PropTypes.string,\n            className: PropTypes.string,\n            \n            fieldClass: PropTypes.string,\n            label: PropTypes.shape({\n                value: PropTypes.string.isRequired,\n                className: PropTypes.string\n            }),\n            options: PropTypes.arrayOf(PropTypes.shape({\n                value: PropTypes.string,\n                label: PropTypes.string\n            }))\n        })).isRequired\n    }).isRequired\n};\n\nexport default Form;","import React from 'react';\nimport Form from 'components';\nimport ReactJson from 'react-json-view';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputData: {}\n    };\n  }\n\n  handleSubmit = (e, data) => {\n    this.setState({inputData: data});\n  };\n\n  getFormData = () => {\n    return {\n      allFieldsRequired: false,\n      fieldsGroupClass: \"form_fields_group\",\n      fieldClass: \"form_field\",\n      labelClass: \"form_label\",\n      inputClass: \"form_input\",\n      fields: [\n        {\n          name: \"name\",\n          type: \"text\",\n          label: {\n            value: \"Full name\"\n          }\n        },\n        {\n          name: \"Language\",\n          type: \"select\",\n          label: {\n            value: \"Language\"\n          },\n          options: [\n            { value: \"es\", label: \"Español\" },\n            { value: \"en\", label: \"English\" }\n          ]\n        },\n        {\n          type: 'group',\n          title: 'Gender',\n          className: \"form_group\",\n          fieldsGroupClass: \"form_fields_group--radio\",\n          fields: [\n            {\n              name: \"gender\",\n              type: \"radio\",\n              value: \"m\",\n              label: {\n                value: \"Male\"\n              },\n              fieldClass: \"form_field--radio\"\n            },\n            {\n              name: \"gender\",\n              type: \"radio\",\n              value: \"f\",\n              label: {\n                value: \"Female\"\n              },\n              fieldClass: \"form_field--radio\"\n            }\n          ]\n        },\n        {\n          name: \"email\",\n          type: \"email\",\n          label: {\n            value: \"Email\"\n          }\n        },\n        {\n          name: \"password\",\n          type: \"password\",\n          label: {\n            value: \"Password\"\n          }\n        },\n        {\n          type: \"custom\",\n          content: \"Holi\"\n        },\n        {\n          name: \"submit\",\n          type: \"submit\",\n          value: \"Send\",\n          fieldClass: \"form_button_field\"\n        }\n      ]\n    };\n  };\n\n  render() {\n    const {inputData} = this.state;\n    const formData = this.getFormData();\n    const reactJsonOptions = {\n      iconStyle: \"triangle\",\n      indentWidth: 4,\n      collapsed: false,\n      displayObjectSize: false,\n      displayDataTypes: false,\n      enableClipboard: false,\n      name: false\n    };\n\n    return (\n      <main className=\"app\">\n        <section>\n          <ReactJson\n            src={formData}\n            {...reactJsonOptions}\n          />\n        </section>\n        <Form\n          data={formData}\n          className=\"form\"\n          onSubmit={this.handleSubmit}\n          >\n          <h1 className=\"form-title\">React json to form</h1>\n        </Form>\n        <section>\n          <ReactJson\n            src={inputData}\n            {...reactJsonOptions}\n          />\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'app';\nimport 'scss/styles.scss';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}