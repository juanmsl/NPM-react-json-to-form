{"version":3,"sources":["components/handler/index.js","components/input/index.js","components/message/index.js","components/select/index.js","components/textarea/index.js","components/index.js","app/index.js","index.js"],"names":["InputHandler","InputComponent","props","handleChange","e","target","type","checked","value","inputValue","nextState","state","setState","onChange","name","this","React","Component","defaultProps","toggleType","fieldClass","labelClass","label","inputProps","id","className","htmlFor","onClick","FormMessage","text","otherProps","renderOptions","options","map","option","i","key","Form","handleInputChange","formData","createClassicInput","commonProps","fieldProps","createSelectInput","createTextareaInput","createMessage","field","inputClass","createFields","data","fields","required","undefined","allFieldsRequired","autoComplete","handleSubmit","preventDefault","onSubmit","forEach","children","formProps","App","inputData","getFormData","placeholder","reactJsonOptions","iconStyle","indentWidth","collapsed","displayObjectSize","displayDataTypes","enableClipboard","src","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b160ed73.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst InputHandler = (InputComponent) => {\n    return class InputHandler extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                name: props.name,\n                value: props.value\n            };\n        }\n\n        static defaultProps = {\n            value: \"\"\n        };\n\n        static propTypes = {\n            name: PropTypes.string.isRequired,\n            value: PropTypes.string,\n            onChange: PropTypes.func.isRequired\n        };\n\n        handleChange = (e) => {\n            const {type, checked, value} = e.target;\n            const inputValue = type === 'checkbox' ? checked : value;\n            const nextState = {...this.state, value: inputValue};\n            this.setState(nextState);\n            this.props.onChange(e, nextState);\n        };\n\n        render() {\n            return (\n                <InputComponent\n                    {...this.props}\n                    {...this.state}\n                    onChange={this.handleChange}\n                />\n            );\n        }\n    }\n};\n\nexport default InputHandler;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport InputHandler from \"../handler\";\n\n\nclass Input extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: props.type\n        };\n    }\n\n    toggleType = () => {\n        this.setState({\n            type: this.state.type === \"password\" ? \"text\" : \"password\"\n        });\n    };\n\n    render() {\n        const { fieldClass, labelClass, label, ...inputProps} = this.props;\n        const {id, type} = this.props;\n\n        return (\n            <section className={fieldClass}>\n                {!label ? null : <label htmlFor={id} className={label.className || labelClass}>{label.value}</label>}\n                <input {...inputProps} {...this.state} />\n                {type === \"password\" ? <h6 onClick={this.toggleType}>Show password</h6> : null }\n            </section>\n        );\n    }\n}\n\nInput.propTypes = {\n    fieldClass: PropTypes.string,\n    labelClass: PropTypes.string,\n    label: PropTypes.shape({\n        value: PropTypes.string.isRequired,\n        className: PropTypes.string\n    }),\n\n    id: PropTypes.string.isRequired,\n    type: PropTypes.oneOf(['text', 'password', 'email', 'number', 'date', 'select', 'textarea', 'message', 'radio', 'submit', 'reset']).isRequired,\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    required: PropTypes.bool,\n    autoComplete: PropTypes.string,\n    className: PropTypes.string,\n    onChange: PropTypes.func.isRequired\n};\n\nexport default InputHandler(Input);","import React from 'react';\n\nexport default function FormMessage(props) {\n    const {text, ...otherProps} = props;\n\n    return (\n        <section {...otherProps}>\n            {text}\n        </section>\n    );\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport InputHandler from \"../handler\";\n\n\nclass SelectInput extends React.Component {\n    renderOptions = (options) => {\n        return [\n            { value: null, label: null },\n            ...options\n        ].map((option, i) => {\n            const {value, label} = option;\n            return <option key={i} value={value}>{label}</option>\n        });\n    };\n\n    render() {\n        const { fieldClass, labelClass, label, options, ...inputProps } = this.props;\n        const { id } = this.props;\n\n        return (\n            <section className={fieldClass}>\n                {!label ? null : <label htmlFor={id} className={label.className || labelClass}>{label.value}</label>}\n                <select {...inputProps}>{this.renderOptions(options)}</select>\n            </section>\n        );\n    }\n}\n\nSelectInput.propTypes = {\n    fieldClass: PropTypes.string,\n    labelClass: PropTypes.string,\n    label: PropTypes.shape({\n        value: PropTypes.string.isRequired,\n        className: PropTypes.string\n    }),\n    options: PropTypes.arrayOf(PropTypes.shape({\n        value: PropTypes.string,\n        label: PropTypes.string\n    })),\n\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    required: PropTypes.bool,\n    autoComplete: PropTypes.string,\n    className: PropTypes.string,\n    onChange: PropTypes.func.isRequired\n};\n\nexport default InputHandler(SelectInput);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport InputHandler from \"../handler\";\n\n\nclass TextareaInput extends React.Component {\n    render() {\n        const { fieldClass, labelClass, label, value, ...inputProps } = this.props;\n        const { id } = this.props;\n\n        return (\n            <section className={fieldClass}>\n                {!label ? null : <label htmlFor={id} className={label.className || labelClass}>{label.value}</label>}\n                <textarea {...inputProps}>{value}</textarea>\n            </section>\n        );\n    }\n}\n\nTextareaInput.propTypes = {\n    fieldClass: PropTypes.string,\n    labelClass: PropTypes.string,\n    label: PropTypes.shape({\n        value: PropTypes.string.isRequired,\n        className: PropTypes.string\n    }),\n\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    required: PropTypes.bool,\n    autoComplete: PropTypes.string,\n    className: PropTypes.string,\n    onChange: PropTypes.func.isRequired\n};\n\nexport default InputHandler(TextareaInput);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ClassicInput from \"./input\";\nimport FormMessage from \"./message\";\nimport SelectInput from \"./select\";\nimport TextareaInput from \"./textarea\";\n\n\nclass Form extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fieldClass: props.data.fieldClass || null,\n            labelClass: props.data.labelClass || null,\n            inputClass: props.data.inputClass || null,\n            formData: {}\n        };\n    }\n\n    componentDidMount() {\n        const {data} = this.props;\n        const state = {};\n\n        data.fields.forEach((field) => {\n            const {type, value, name} = field;\n            if(type !== \"submit\") {\n                state[name] = value || \"\";\n            }\n        });\n\n        this.setState(state);\n    }\n\n    handleInputChange = (e, state) => {\n        const {name, value} = state;\n        this.setState({formData: {\n            ...this.state.formData,\n            [name]: value\n        }});\n    };\n\n    createClassicInput = (i, commonProps, fieldProps) => {\n        const props = {\n            ...commonProps,\n            onChange: this.handleInputChange,\n            ...fieldProps\n        };\n\n        return <ClassicInput key={i} {...props} />\n    };\n\n    createSelectInput = (i, commonProps, fieldProps) => {\n        const { type, ...inputProps } = fieldProps;\n        \n        const props = {\n            ...commonProps,\n            onChange: this.handleInputChange,\n            ...inputProps\n        };\n\n        return <SelectInput key={i} {...props} />\n    };\n    \n    createTextareaInput = (i, commonProps, fieldProps) => {\n        const { type, ...inputProps } = fieldProps;\n\n        const props = {\n            ...commonProps,\n            onChange: this.handleInputChange,\n            ...inputProps\n        };\n\n        return <TextareaInput key={i} {...props} />\n    };\n\n    createMessage = (field, i) => {\n        const { fieldClass, label, ...inputProps } = field;\n        const { name } = field;\n\n        const props = {\n            label,\n            fieldClass: fieldClass || this.state.fieldClass,\n            labelClass: this.state.labelClass,\n            inputClass: this.state.inputClass,\n            id: `${name}_${i}`,\n            ...inputProps\n        };\n\n        return <FormMessage key={i} {...props} />\n    };\n\n    createFields = (data) => (\n        data.fields.map(\n            (field, i) => {\n                const { fieldClass, label, className, required, ...fieldProps} = field;\n                const {name} = field;\n\n                const props = {\n                    label,\n                    fieldClass: fieldClass || this.state.fieldClass,\n                    labelClass: this.state.labelClass,\n                    className: className || this.state.inputClass,\n                    required: required !== undefined ? required : data.allFieldsRequired,\n                    id: `${name}_${i}`,\n                    autoComplete: \"off\"\n                };\n\n                switch (field.type) {\n                    case 'message': return this.createMessage(field, i);\n                    case 'textarea': return this.createTextareaInput(i, props, fieldProps);\n                    case 'select': return this.createSelectInput(i, props, fieldProps);\n                    default: return this.createClassicInput(i, props, fieldProps);\n                }\n            }\n        )\n    );\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const {onSubmit} = this.props;\n        onSubmit(e, this.state.formData);\n    };\n\n    render() {\n        const {\n            data, children, ...formProps\n        } = this.props;\n\n        return (\n            <form {...formProps} onSubmit={this.handleSubmit}>\n                {children}\n                {this.createFields(data)}\n            </form>\n        );\n    }\n};\n\nForm.defaultProps = {\n    data: {}\n};\n\nForm.propTypes = {\n    data: PropTypes.shape({\n        allFieldsRequired: PropTypes.bool,\n        fieldClass: PropTypes.string,\n        labelClass: PropTypes.string,\n        inputClass: PropTypes.string,\n        fields: PropTypes.arrayOf(PropTypes.shape({\n            type: PropTypes.oneOf(['text', 'password', 'email', 'number', 'date', 'select', 'textarea', 'message', 'radio', 'submit', 'reset']).isRequired,\n            name: PropTypes.string,\n            value: PropTypes.string,\n            required: PropTypes.bool,\n            autoComplete: PropTypes.string,\n            className: PropTypes.string,\n            \n            fieldClass: PropTypes.string,\n            label: PropTypes.shape({\n                value: PropTypes.string.isRequired,\n                className: PropTypes.string\n            }),\n            options: PropTypes.arrayOf(PropTypes.shape({\n                value: PropTypes.string,\n                label: PropTypes.string\n            }))\n        })).isRequired\n    }).isRequired\n};\n\nexport default Form;","import React from 'react';\nimport Form from 'components';\nimport ReactJson from 'react-json-view';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputData: {}\n    };\n  }\n\n  handleSubmit = (e, data) => {\n    this.setState({inputData: data});\n  };\n\n  getFormData = () => {\n    return {\n      allFieldsRequired: true,\n      fieldClass: \"form_field\",\n      labelClass: \"\",\n      inputClass: \"\",\n      fields: [\n        {\n          name: \"name\",\n          type: \"text\",\n          label: {\n            value: \"Full name\"\n          }\n        },\n        {\n          name: \"Language\",\n          type: \"select\",\n          label: {\n            value: \"Language\"\n          },\n          options: [\n            { value: \"es\", label: \"Español\" },\n            { value: \"en\", label: \"English\" }\n          ]\n        },\n        {\n          name: \"gender\",\n          type: \"radio\",\n          value: \"m\",\n          label: {\n            value: \"Male\"\n          },\n          fieldClass: \"d\"\n        },\n        {\n          name: \"gender\",\n          type: \"radio\",\n          value: \"f\",\n          label: {\n            value: \"Female\"\n          },\n          fieldClass: \"d\"\n        },\n        {\n          name: \"email\",\n          type: \"email\",\n          placeholder: \"@\",\n          label: {\n            value: \"Email\"\n          }\n        },\n        {\n          name: \"password\",\n          type: \"password\",\n          label: {\n            value: \"Password\"\n          }\n        },\n        {\n          name: \"submit\",\n          type: \"submit\",\n          value: \"Send\",\n          fieldClass: \"form_button_field\"\n        }\n      ]\n    };\n  };\n\n  render() {\n    const {inputData} = this.state;\n    const formData = this.getFormData();\n    const reactJsonOptions = {\n      iconStyle: \"triangle\",\n      indentWidth: 4,\n      collapsed: false,\n      displayObjectSize: false,\n      displayDataTypes: false,\n      enableClipboard: false\n    };\n\n    return (\n      <main className=\"app\">\n        <section>\n          <ReactJson\n            src={formData}\n            {...reactJsonOptions}\n          />\n        </section>\n        <Form\n          data={formData}\n          className=\"form\"\n          onSubmit={this.handleSubmit}\n          >\n          <h1 className=\"form-title\">React json to form</h1>\n        </Form>\n        <section>\n          <ReactJson\n            src={inputData}\n            {...reactJsonOptions}\n          />\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'app';\nimport 'scss/styles.scss';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}